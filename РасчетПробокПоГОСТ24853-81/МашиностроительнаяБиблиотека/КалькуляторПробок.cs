using System;
using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo("МашиностроительнаяБиблиотекаТесты")]

namespace МашиностроительнаяБиблиотека
{
    public static class КалькуляторПробок
    {
        public const int МинимальныйКвалитет = 6;
        public const int МаксимальныйКвалитет = 17;

        public const decimal МинимальныйРазмер = 0;
        public const decimal МаксимальныйРазмер = 500;

        public static РазмерCОтклонениями ВычислитьРазмерПробкиПР(РазмерCОтклонениями размерОтверстия, bool округлять = true)
        {
            int квалитет;
            int номерИнтервала;
            ПроверитьРазмерОтверстияИНайтиКвалитетИНомерИнтервала(размерОтверстия, out квалитет, out номерИнтервала);

            decimal номинальныйРазмер = размерОтверстия.НаименьшийПредельныйРазмер() + Z(квалитет, номерИнтервала) + H(квалитет, номерИнтервала) / 2;
            decimal нижнееОтклонение = -H(квалитет, номерИнтервала);
            decimal верхнееОтклонение = 0;            

            if (округлять)
            {
                номинальныйРазмер = ОкруглитьРазмерДоПоловиныМикрометраВБольшуюСторону(номинальныйРазмер);
            }

            return new РазмерCОтклонениями(номинальныйРазмер, нижнееОтклонение, верхнееОтклонение);
        }
    
        public static decimal ВычислитьРазмерПробкиПРизнош(РазмерCОтклонениями размерОтверстия)
        {
            int квалитет;
            int номерИнтервала;
            ПроверитьРазмерОтверстияИНайтиКвалитетИНомерИнтервала(размерОтверстия, out квалитет, out номерИнтервала);

            decimal размерПробкиПРизнош = размерОтверстия.НаименьшийПредельныйРазмер() - Y(квалитет, номерИнтервала) + Al(квалитет, номерИнтервала);

            return размерПробкиПРизнош;
        }

        public static РазмерCОтклонениями ВычислитьРазмерПробкиНЕ(РазмерCОтклонениями размерОтверстия, bool округлять = true)
        {
            int квалитет;
            int номерИнтервала;
            ПроверитьРазмерОтверстияИНайтиКвалитетИНомерИнтервала(размерОтверстия, out квалитет, out номерИнтервала);

            decimal номинальныйРазмер = (размерОтверстия.НаибольшийПредельныйРазмер() - Al(квалитет, номерИнтервала) + H(квалитет, номерИнтервала) / 2);
            decimal нижнееОтклонение = -H(квалитет, номерИнтервала);
            decimal верхнееОтклонение = 0;

            if (округлять)
            {
                номинальныйРазмер = ОкруглитьРазмерДоПоловиныМикрометраВМеньшуюСторону(номинальныйРазмер);
            }

            return new РазмерCОтклонениями(номинальныйРазмер, нижнееОтклонение, верхнееОтклонение);
        }

        public static РазмерCОтклонениями ВычислитьРазмерСкобыПР(РазмерCОтклонениями размерОтверстия, bool округлять = true)
        {
            int квалитет;
            int номерИнтервала;
            ПроверитьРазмерОтверстияИНайтиКвалитетИНомерИнтервала(размерОтверстия, out квалитет, out номерИнтервала);

            decimal номинальныйРазмер = размерОтверстия.НаибольшийПредельныйРазмер() - Z1(квалитет, номерИнтервала) - H1(квалитет, номерИнтервала) / 2;
            decimal нижнееОтклонение = H1(квалитет, номерИнтервала);
            decimal верхнееОтклонение = 0;            

            if (округлять)
            {
                номинальныйРазмер = ОкруглитьРазмерДоПоловиныМикрометраВБольшуюСторону(номинальныйРазмер);
            }

            return new РазмерCОтклонениями(номинальныйРазмер, нижнееОтклонение, верхнееОтклонение);
        }

        public static decimal ВычислитьРазмерСкобыПРизнош(РазмерCОтклонениями размерОтверстия)
        {
            int квалитет;
            int номерИнтервала;
            ПроверитьРазмерОтверстияИНайтиКвалитетИНомерИнтервала(размерОтверстия, out квалитет, out номерИнтервала);

            decimal размерПробкиПРизнош = размерОтверстия.НаибольшийПредельныйРазмер() + Y1(квалитет, номерИнтервала) - Al1(квалитет, номерИнтервала);

            return размерПробкиПРизнош;
        } 

        public static РазмерCОтклонениями ВычислитьРазмерСкобыНЕ(РазмерCОтклонениями размерОтверстия, bool округлять = true)
        {
            int квалитет;
            int номерИнтервала;
            ПроверитьРазмерОтверстияИНайтиКвалитетИНомерИнтервала(размерОтверстия, out квалитет, out номерИнтервала);

            decimal номинальныйРазмер = (размерОтверстия.НаименьшийПредельныйРазмер() + Al1(квалитет, номерИнтервала) - H1(квалитет, номерИнтервала) / 2);
            decimal нижнееОтклонение = H1(квалитет, номерИнтервала);
            decimal верхнееОтклонение = 0;

            if (округлять)
            {
                номинальныйРазмер = ОкруглитьРазмерДоПоловиныМикрометраВМеньшуюСторону(номинальныйРазмер);
            }

            return new РазмерCОтклонениями(номинальныйРазмер, нижнееОтклонение, верхнееОтклонение);
        }                                                                                   


        private static void ПроверитьРазмерОтверстияИНайтиКвалитетИНомерИнтервала(РазмерCОтклонениями размерОтверстия, out int квалитет, out int номерИнтервала)
        {
            ПроверитьНоминальныйРазмерОтверстия(размерОтверстия.НоминальныйРазмер);
            квалитет = ТаблицаДопусков.НайтиБлижайшийКвалитет(размерОтверстия);
            ПроверитьКвалитет(квалитет);            
            if (квалитет == 17) квалитет = 16; 
            номерИнтервала = НайтиНомерИнтервала(размерОтверстия.НаименьшийПредельныйРазмер());
        }


        private static void ПроверитьНоминальныйРазмерОтверстия(decimal размер)
        {
            if (размер <= МинимальныйРазмер)
                throw new ArgumentOutOfRangeException(String.Format("(размер = {0}мм) <= {1}мм", размер, МинимальныйРазмер));

            if (размер > МаксимальныйРазмер)
                throw new ArgumentOutOfRangeException(String.Format("(размер = {0}мм) > {1}мм", размер, МаксимальныйРазмер));

        }

        private static void ПроверитьКвалитет(int квалитет)
        {
            if (квалитет < МинимальныйКвалитет)
                throw new ArgumentOutOfRangeException(String.Format("(квалитет = {0}) < {1}", квалитет, МинимальныйКвалитет));

            if (квалитет > МаксимальныйКвалитет)
                throw new ArgumentOutOfRangeException(String.Format("(квалитет = {0}) > {1}", квалитет, МаксимальныйКвалитет));
        }

        private static decimal[] верхнииГраницыИнтервалов = { 3, 6, 10, 18, 30, 50, 80, 120, 180, 250, 315, 400, 500 };

        private static int НайтиНомерИнтервала(decimal D)
        {           
            return Array.FindIndex<decimal>(верхнииГраницыИнтервалов, граница => (граница >= D));
        }

        private static decimal[,] таблицаZ = {
                {   1m, 1.5m, 1.5m,   2m,   2m, 2.5m, 2.5m,   3m,   4m,   5m,   6m,   7m,   8m }, //6
                { 1.5m,   2m,   2m, 2.5m,   3m, 3.5m,   4m,   5m,   6m,   7m,   8m,  10m,  11m }, //7
                {   2m,   3m,   3m,   4m,   5m,   6m,   7m,   8m,   9m,  12m,  14m,  16m,  18m }, //8
                {   5m,   6m,   7m,   8m,   9m,  11m,  13m,  15m,  18m,  21m,  24m,  28m,  32m }, //9 
                {   5m,   6m,   7m,   8m,   9m,  11m,  13m,  15m,  18m,  24m,  27m,  32m,  37m }, //10
                {  10m,  12m,  14m,  16m,  19m,  22m,  25m,  28m,  32m,  40m,  45m,  50m,  55m }, //11
                {  10m,  12m,  14m,  16m,  19m,  22m,  25m,  28m,  32m,  45m,  50m,  65m,  70m }, //12
                {  20m,  24m,  28m,  32m,  36m,  42m,  48m,  54m,  60m,  80m,  90m, 100m, 110m }, //13
                {  20m,  24m,  28m,  32m,  36m,  42m,  48m,  54m,  60m, 100m, 110m, 125m, 145m }, //14
                {  40m,  48m,  56m,  64m,  72m,  80m,  90m, 100m, 110m, 170m, 190m, 210m, 240m }, //15
                {  40m,  48m,  56m,  64m,  75m,  80m,  90m, 100m, 110m, 210m, 240m, 280m, 320m }  //16
            };

        private static decimal[,] таблицаY = {
                {   1m,   1m,   1m, 1.5m, 1.5m,   2m,   2m,   3m,   3m,   4m,   5m,   6m,   7m }, //6
                { 1.5m, 1.5m, 1.5m,   2m,   3m,   3m,   3m,   4m,   4m,   6m,   7m,   8m,   9m }, //7
                {   3m,   3m,   3m,   4m,   4m,   5m,   5m,   6m,   6m,   7m,   9m,   9m,  11m }, //8
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //9 
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //10
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //11
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //12
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //13
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //14
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //15
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }  //16
            };

        private static decimal[,] таблицаAl = {
                 {  0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   2m,   3m,   4m,   5m }, //6
                 {  0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   3m,   4m,   6m,   7m }, //7
                 {  0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   4m,   6m,   7m,   9m }, //8
                 {  0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   4m,   6m,   7m,   9m }, //9 
                 {  0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   7m,   9m,  11m,  14m }, //10
                 {  0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,  10m,  15m,  15m,  20m }, //11
                 {  0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,  15m,  20m,  30m,  35m }, //12
                 {  0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,  25m,  35m,  45m,  55m }, //13
                 {  0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,  45m,  55m,  70m,  90m }, //14
                 {  0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,  70m,  90m, 110m, 140m }, //15
                 {  0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m, 110m, 140m, 180m, 220m }, //16
            };

        private static decimal[,] таблицаH = {
                { 1.2m, 1.5m, 1.5m,   2m, 2.5m, 2.5m,   3m,   4m,   5m,   7m,   8m,   9m,  10m }, //6
                {   2m, 2.5m, 2.5m,   3m,   4m,   4m,   5m,   6m,   8m,  10m,  12m,  13m,  15m }, //7
                {   2m, 2.5m, 2.5m,   3m,   4m,   4m,   5m,   6m,   8m,  10m,  12m,  13m,  15m }, //8
                {   2m, 2.5m, 2.5m,   3m,   4m,   4m,   5m,   6m,   8m,  10m,  12m,  13m,  15m }, //9 
                {   2m, 2.5m, 2.5m,   3m,   4m,   4m,   5m,   6m,   8m,  10m,  12m,  13m,  15m }, //10
                {   4m,   5m,   6m,   8m,   9m,  11m,  13m,  15m,  18m,  20m,  23m,  25m,  27m }, //11
                {   4m,   5m,   6m,   8m,   9m,  11m,  13m,  15m,  18m,  20m,  23m,  25m,  27m }, //12
                {  10m,  12m,  15m,  18m,  21m,  25m,  30m,  35m,  40m,  46m,  52m,  57m,  63m }, //13
                {  10m,  12m,  15m,  18m,  21m,  25m,  30m,  35m,  40m,  46m,  52m,  57m,  63m }, //14
                {  10m,  12m,  15m,  18m,  21m,  25m,  30m,  35m,  40m,  46m,  52m,  57m,  63m }, //15
                {  10m,  12m,  15m,  18m,  21m,  25m,  30m,  35m,  40m,  46m,  52m,  57m,  63m }, //16
            };

        private static decimal[,] таблицаZ1 = {
                {  1.5m,  2m,   2m, 2.5m,   3m, 3.5m,   4m,   5m,   6m,   7m,   8m,  10m,  11m }, //6
                { 1.5m,   2m,   2m, 2.5m,   3m, 3.5m,   4m,   5m,   6m,   7m,   8m,  10m,  11m }, //7
                {   2m,   3m,   3m,   4m,   5m,   6m,   7m,   8m,   9m,  12m,  14m,  16m,  18m }, //8
                {   5m,   6m,   7m,   8m,   9m,  11m,  13m,  15m,  18m,  21m,  24m,  28m,  32m }, //9 
                {   5m,   6m,   7m,   8m,   9m,  11m,  13m,  15m,  18m,  24m,  27m,  32m,  37m }, //10
                {  10m,  12m,  14m,  16m,  19m,  22m,  25m,  28m,  32m,  40m,  45m,  50m,  55m }, //11
                {  10m,  12m,  14m,  16m,  19m,  22m,  25m,  28m,  32m,  45m,  50m,  65m,  70m }, //12
                {  20m,  24m,  28m,  32m,  36m,  42m,  48m,  54m,  60m,  80m,  90m, 100m, 110m }, //13
                {  20m,  24m,  28m,  32m,  36m,  42m,  48m,  54m,  60m, 100m, 110m, 125m, 145m }, //14
                {  40m,  48m,  56m,  64m,  72m,  80m,  90m, 100m, 110m, 170m, 190m, 210m, 240m }, //15
                {  40m,  48m,  56m,  64m,  75m,  80m,  90m, 100m, 110m, 210m, 240m, 280m, 320m }  //16
            };

        private static decimal[,] таблицаY1 = {
                { 1.5m, 1.5m, 1.5m,   2m,   3m,   3m,   3m,   4m,   4m,   5m,   6m,   6m,   7m }, //6
                { 1.5m, 1.5m, 1.5m,   2m,   3m,   3m,   3m,   4m,   4m,   6m,   7m,   8m,   9m }, //7
                {   3m,   3m,   3m,   4m,   4m,   5m,   5m,   6m,   6m,   7m,   9m,   9m,  11m }, //8
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //9 
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //10
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //11
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //12
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //13
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //14
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }, //15
                {   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m,   0m }  //16
            };

        private static decimal[,] таблицаH1 = {
                {   2m, 2.5m, 2.5m,   3m,   4m,   4m,   5m,   6m,   8m,  10m,  12m,  13m,  15m }, //6
                {   2m, 2.5m, 2.5m,   3m,   4m,   4m,   5m,   6m,   8m,  10m,  12m,  13m,  15m }, //7
                {   3m,   4m,   4m,   5m,   6m,   7m,   8m,  10m,  12m,  14m,  16m,  18m,  20m }, //8
                {   3m,   4m,   4m,   5m,   6m,   7m,   8m,  10m,  12m,  14m,  16m,  18m,  20m }, //9 
                {   3m,   4m,   4m,   5m,   6m,   7m,   8m,  10m,  12m,  14m,  16m,  18m,  20m }, //10
                {   4m,   5m,   6m,   8m,   9m,  11m,  13m,  15m,  18m,  20m,  23m,  25m,  27m }, //11
                {   4m,   5m,   6m,   8m,   9m,  11m,  13m,  15m,  18m,  20m,  23m,  25m,  27m }, //12
                {  10m,  12m,  15m,  18m,  21m,  25m,  30m,  35m,  40m,  46m,  52m,  57m,  63m }, //13
                {  10m,  12m,  15m,  18m,  21m,  25m,  30m,  35m,  40m,  46m,  52m,  57m,  63m }, //14
                {  10m,  12m,  15m,  18m,  21m,  25m,  30m,  35m,  40m,  46m,  52m,  57m,  63m }, //15
                {  10m,  12m,  15m,  18m,  21m,  25m,  30m,  35m,  40m,  46m,  52m,  57m,  63m }, //16
            };

         private static decimal[,] таблицаHp = {
                { 0.8m,   1m,   1m, 1.2m, 1.5m, 1.5m,   2m, 2.5m, 3.5m, 4.5m,   6m,   7m,   8m }, //6
                { 0.8m,   1m,   1m, 1.2m, 1.5m, 1.5m,   2m, 2.5m, 3.5m, 4.5m,   6m,   7m,   8m }, //7
                { 1.2m, 1.5m, 1.5m,   2m, 2.5m, 2.5m,   3m,   4m,   5m,   7m,   8m,   9m,  10m }, //8
                { 1.2m, 1.5m, 1.5m,   2m, 2.5m, 2.5m,   3m,   4m,   5m,   7m,   8m,   9m,  10m }, //9 
                { 1.2m, 1.5m, 1.5m,   2m, 2.5m, 2.5m,   3m,   4m,   5m,   7m,   8m,   9m,  10m }, //10
                { 1.2m, 1.5m, 1.5m,   2m, 2.5m, 2.5m,   3m,   4m,   5m,   7m,   8m,   9m,  10m }, //11
                { 1.2m, 1.5m, 1.5m,   2m, 2.5m, 2.5m,   3m,   4m,   5m,   7m,   8m,   9m,  10m }, //12
                {   2m, 2.5m, 2.5m,   3m,   4m,   4m,   5m,   6m,   8m,  10m,  12m,  13m,  15m }, //13
                {   2m, 2.5m, 2.5m,   3m,   4m,   4m,   5m,   6m,   8m,  10m,  12m,  13m,  15m }, //14
                {   2m, 2.5m, 2.5m,   3m,   4m,   4m,   5m,   6m,   8m,  10m,  12m,  13m,  15m }, //15
                {   2m, 2.5m, 2.5m,   3m,   4m,   4m,   5m,   6m,   8m,  10m,  12m,  13m,  15m }, //16
            };



        private static int КвалитетВИндексСтроки(int квалитет)
        {
            return квалитет - 6;
        }

        private static decimal f(decimal[,] таблица, int квалитет, int номерИнтервала)
        {     
            return таблица[КвалитетВИндексСтроки(квалитет), номерИнтервала] / 1000;
        }

        private static decimal Z(int квалитет, int номерИнтервала)
        {
            return f(таблицаZ, квалитет, номерИнтервала);
        }

        private static decimal Z1(int квалитет, int номерИнтервала)
        {
            return f(таблицаZ1, квалитет, номерИнтервала);
        }                     

        private static decimal Y1(int квалитет, int номерИнтервала)
        {
            return f(таблицаY1, квалитет, номерИнтервала);
        }                     

        private static decimal H1(int квалитет, int номерИнтервала)
        {
            return f(таблицаH1, квалитет, номерИнтервала);
        }                     

        private static decimal Hp(int квалитет, int номерИнтервала)
        {
            return f(таблицаHp, квалитет, номерИнтервала);
        }                     

        private static decimal Y(int квалитет, int номерИнтервала)
        {
            return f(таблицаY, квалитет, номерИнтервала);
        }

        private static decimal Al(int квалитет, int номерИнтервала)
        {
            return f(таблицаAl, квалитет, номерИнтервала);
        }

        private static decimal Al1(int квалитет, int номерИнтервала)
        {
            return f(таблицаAl, квалитет, номерИнтервала);
        }                      

        private static decimal H(int квалитет, int номерИнтервала)
        {
            return f(таблицаH, квалитет, номерИнтервала);
        }

        internal static decimal ОкруглитьРазмерДоПоловиныМикрометраВМеньшуюСторону(decimal размер)
        {
            return Math.Truncate(размер * 2000) / 2000;
        }

        internal static decimal ОкруглитьРазмерДоПоловиныМикрометраВБольшуюСторону(decimal размер)
        {
            return Math.Ceiling(размер * 2000) / 2000;
        }
    }
}
