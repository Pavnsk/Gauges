using System;
using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo("МашиностроительнаяБиблиотекаТесты")]

namespace МашиностроительнаяБиблиотека
{
    public static class ТаблицаДопусков
    {
        internal static decimal[] верхнииГраницыИнтервалов =
            {
                3m, 6m, 10m, 18m, 30m, 50m, 80m, 120m, 180m, 250m, 315m,
                400m, 500m, 630m, 800m, 1000m, 1250m, 1600m, 2000m, 2500m, 3150m, 4000m, 5000m, 6300m, 8000m, 10000m
            };

        internal static decimal[][] допуски =
            {
                new decimal[]
                    {
                        0.3m, 0.5m, 0.8m, 1.2m, 2m, 3m, 4m, 6m, 10m, 14m, 25m, 40m, 60m, 100m, 140m, 250m, 400m, 600m,
                        1000m, 1400m
                    },
                new decimal[]
                    {
                        0.4m, 0.6m, 1m, 1.5m, 2.5m, 4m, 5m, 8m, 12m, 18m, 30m, 48m, 75m, 120m, 180m, 300m, 480m, 750m,
                        1200m, 1800m
                    },
                new decimal[]
                    {
                        0.4m, 0.6m, 1m, 1.5m, 2.5m, 4m, 6m, 9m, 15m, 22m, 36m, 58m, 90m, 150m, 220m, 360m, 580m, 900m,
                        1500m, 2200m
                    },
                new decimal[]
                    {
                        0.5m, 0.8m, 1.2m, 2m, 3m, 5m, 8m, 11m, 18m, 27m, 43m, 70m, 110m, 180m, 270m, 430m, 700m, 1100m,
                        1800m, 2700m
                    },
                new decimal[]
                    {
                        0.6m, 1m, 1.5m, 2.5m, 4m, 6m, 9m, 13m, 21m, 33m, 52m, 84m, 130m, 210m, 330m, 520m, 840m, 1300m,
                        2100m, 3300m
                    },
                new decimal[]
                    {
                        0.6m, 1m, 1.5m, 2.5m, 4m, 7m, 11m, 16m, 25m, 39m, 62m, 100m, 160m, 250m, 390m, 620m, 1000m, 1600m,
                        2500m, 3900m
                    },
                new decimal[]
                    {
                        0.8m, 1.2m, 2m, 3m, 5m, 8m, 13m, 19m, 30m, 46m, 74m, 120m, 190m, 300m, 460m, 740m, 1200m, 1900m,
                        3000m, 4600m
                    },
                new decimal[]
                    {
                        1m, 1.5m, 2.5m, 4m, 6m, 10m, 15m, 22m, 35m, 54m, 87m, 140m, 220m, 350m, 540m, 870m, 1400m, 2200m,
                        3500m, 5400m
                    },
                new decimal[]
                    {
                        1.2m, 2m, 3.5m, 5m, 8m, 12m, 18m, 25m, 40m, 63m, 100m, 160m, 250m, 400m, 630m, 1000m, 1600m, 2500m,
                        4000m, 6300m
                    },
                new decimal[]
                    {
                        2m, 3m, 4.5m, 7m, 10m, 14m, 20m, 29m, 46m, 72m, 115m, 185m, 290m, 460m, 720m, 1150m, 1850m, 2900m,
                        4600m, 7200m
                    },
                new decimal[]
                    {
                        2.5m, 4m, 6m, 8m, 12m, 16m, 23m, 32m, 52m, 81m, 130m, 210m, 320m, 520m, 810m, 1300m, 2100m, 3200m,
                        5200m, 8100m
                    },
                new decimal[]
                    {
                        3m, 5m, 7m, 9m, 13m, 18m, 25m, 36m, 57m, 89m, 140m, 230m, 360m, 570m, 890m, 1400m, 2300m, 3600m,
                        5700m, 8900m
                    },
                new decimal[]
                    {
                        4m, 6m, 8m, 10m, 15m, 20m, 27m, 40m, 63m, 97m, 155m, 250m, 400m, 630m, 970m, 1550m, 2500m, 4000m,
                        6300m, 9700m
                    },
                new decimal[]
                    {
                        4.5m, 6m, 9m, 11m, 16m, 22m, 30m, 44m, 70m, 110m, 175m, 280m, 440m, 700m, 1100m, 1750m, 2800m,
                        4400m, 7000m, 11000m
                    },
                new decimal[]
                    {
                        5m, 7m, 10m, 13m, 18m, 25m, 35m, 50m, 80m, 125m, 200m, 320m, 500m, 800m, 1250m, 2000m, 3200m, 5000m
                        , 8000m, 12500m
                    },
                new decimal[]
                    {
                        5.5m, 8m, 11m, 15m, 21m, 29m, 40m, 56m, 90m, 140m, 230m, 360m, 560m, 900m, 1400m, 2300m, 3600m,
                        5600m, 9000m, 14000m
                    },
                new decimal[]
                    {
                        6.5m, 9m, 13m, 18m, 24m, 34m, 46m, 66m, 105m, 165m, 260m, 420m, 660m, 1050m, 1650m, 2600m, 4200m,
                        6600m, 10500m, 16500m
                    },
                new decimal[]
                    {
                        8m, 11m, 15m, 21m, 29m, 40m, 54m, 78m, 125m, 195m, 310m, 500m, 780m, 1250m, 1950m, 3100m, 5000m,
                        7800m, 12500m, 19500m
                    },
                new decimal[]
                    {
                        9m, 13m, 18m, 25m, 35m, 48m, 65m, 92m, 150m, 230m, 370m, 600m, 920m, 1500m, 2300m, 3700m, 6000m,
                        9200m, 15000m, 23000m
                    },
                new decimal[]
                    {
                        11m, 15m, 22m, 30m, 41m, 57m, 77m, 110m, 175m, 280m, 440m, 700m, 1100m, 1750m, 2800m, 4400m, 7000m,
                        11000m, 17500m, 28000m
                    },
                new decimal[]
                    {
                        13m, 18m, 26m, 36m, 50m, 69m, 93m, 135m, 210m, 330m, 540m, 860m, 1350m, 2100m, 3300m, 5400m, 8600m,
                        13500m, 21000m, 33000m
                    },
                new decimal[]
                    {
                        16m, 23m, 33m, 45m, 60m, 84m, 115m, 165m, 260m, 410m, 660m, 1050m, 1650m, 2600m, 4100m, 6600m,
                        10500m, 16500m, 26000m, 41000m
                    },
                new decimal[]
                    {
                        20m, 28m, 40m, 55m, 74m, 100m, 140m, 200m, 320m, 500m, 800m, 1300m, 2000m, 3200m, 5000m, 8000m,
                        13000m, 20000m, 32000m, 50000m
                    },
                new decimal[]
                    {
                        25m, 35m, 49m, 67m, 92m, 125m, 170m, 250m, 400m, 620m, 980m, 1550m, 2500m, 4000m, 6200m, 9800m,
                        15500m, 25000m, 40000m, 62000m
                    },
                new decimal[]
                    {
                        31m, 43m, 62m, 84m, 115m, 155m, 215m, 310m, 490m, 760m, 1200m, 1950m, 3100m, 4900m, 7600m, 12000m,
                        19500m, 31000m, 49000m, 76000m
                    },
                new decimal[]
                    {
                        38m, 53m, 76m, 105m, 140m, 195m, 270m, 380m, 600m, 940m, 1500m, 2400m, 3800m, 6000m, 9400m, 15000m,
                        24000m, 38000m, 60000m, 94000m
                    }
            };

        public const decimal МинимальныйРазмер = 0;
        public const decimal МаксимальныйРазмер = 10000;

        public const int МинимальныйКвалитет = -1;
        public const int МаксимальныйКвалитет = 18;

        public static decimal НайтиДопуск(decimal размер, int квалитет)
        {
            ПроверитьПараметрРазмер(размер);
            ПроверитьПараметрКвалитет(квалитет);
            int индексСтроки = НайтиИндексСтроки(размер);
            int индексСтолбца = КвалитетВИндексСтолбца(квалитет);
            return допуски[индексСтроки][индексСтолбца]/1000;
        }

        public static int НайтиКвалитетТочноИлиСтроже(РазмерCОтклонениями размерCОтклонениями)
        {
            return НайтиКвалитетТочноИлиСтроже(размерCОтклонениями.НоминальныйРазмер, размерCОтклонениями.Допуск());
        }

        public static int НайтиБлижайшийКвалитет(РазмерCОтклонениями размерCОтклонениями)
        {
            return НайтиБлижайшийКвалитет(размерCОтклонениями.НоминальныйРазмер, размерCОтклонениями.Допуск());
        }

        public static int НайтиКвалитетТочноИлиСтроже(decimal размер, decimal допуск)
        {
            допуск *= 1000;
            ПроверитьПараметрыРазмерИДопуск(размер, допуск);
            int индексСтроки = НайтиИндексСтроки(размер);
            int индексСтолбца = НайтиИндексСтолбцаТочноИлиСтроже(допуск, индексСтроки);
            return ИндексСтолбцаВКвалитет(индексСтолбца);
        }

        public static int НайтиБлижайшийКвалитет(decimal размер, decimal допуск)
        {
            допуск *= 1000;
            ПроверитьПараметрыРазмерИДопуск(размер, допуск);
            int индексСтроки = НайтиИндексСтроки(размер);
            int индексСтолбца = НайтиИндексСтолбцаБлижайший(допуск, индексСтроки);
            return ИндексСтолбцаВКвалитет(индексСтолбца);
        }

        private static void ПроверитьПараметрРазмер(decimal размер)
        {
            if (размер <= МинимальныйРазмер)
                throw new ArgumentOutOfRangeException(String.Format("(размер = {0}мм) <= {1}мм", размер,
                                                                    МинимальныйРазмер));

            if (размер > МаксимальныйРазмер)
                throw new ArgumentOutOfRangeException(String.Format("(размер = {0}мм) > {1}мм", размер,
                                                                    МаксимальныйРазмер));
        }

        private static void ПроверитьПараметрКвалитет(int квалитет)
        {
            if (квалитет < МинимальныйКвалитет)
                throw new ArgumentOutOfRangeException(String.Format("(квалитет = {0}) < {1}", квалитет,
                                                                    МинимальныйКвалитет));

            if (квалитет > МаксимальныйКвалитет)
                throw new ArgumentOutOfRangeException(String.Format("(квалитет = {0}) > {1}", квалитет,
                                                                    МаксимальныйКвалитет));
        }

        private static void ПроверитьПараметрыРазмерИДопуск(decimal размер, decimal допуск)
        {
            ПроверитьПараметрРазмер(размер);
            int индексСтроки = НайтиИндексСтроки(размер);
            decimal минДопуск = допуски[индексСтроки][0];
            if (допуск < минДопуск)
                throw new ArgumentOutOfRangeException(String.Format("(допуск = {0}мкм) < {1}мкм", допуск, минДопуск));
        }

        internal static int ИндексСтолбцаВКвалитет(int индексСтолбца)
        {
            return индексСтолбца - 1;
        }

        private static int КвалитетВИндексСтолбца(int квалитет)
        {
            return квалитет + 1;
        }

        private static int НайтиИндексСтроки(decimal размер)
        {
            return Array.FindIndex<decimal>(верхнииГраницыИнтервалов, граница => (граница >= размер));
        }

        private static int НайтиИндексСтолбцаТочноИлиСтроже(decimal допуск, int индексСтроки)
        {
            return Array.FindLastIndex<decimal>(допуски[индексСтроки], таблДопуск => (допуск >= таблДопуск));
        }

        private static int НайтиИндексСтолбцаБлижайший(decimal допуск, int индексСтроки)
        {
            int индекс = НайтиИндексСтолбцаТочноИлиСтроже(допуск, индексСтроки);
            int последнийСтолбец = допуски[0].Length - 1;
            if (индекс != -1 && индекс != последнийСтолбец)
            {
                decimal растояние = допуски[индексСтроки][индекс + 1] - допуски[индексСтроки][индекс];
                if (допуск >= (допуски[индексСтроки][индекс] + растояние/2))
                    индекс++;
            }
            return индекс;
        }

    }
}
